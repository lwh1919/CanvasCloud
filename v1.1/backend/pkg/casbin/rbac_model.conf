#权限验证请求（的结构）：sub是访问实例/主体（如用户iduser_379），dom是域（如picture, spaceUser），obj是资源对象（如picture, spaceUser），act是操作类型（如upload, edit, delete, view）
[request_definition]
r = sub, dom, obj, act

#权限策略（格式）：sub：角色（如admin, editor, viewer）obj：资源类型（如picture, spaceUser）act：操作类型（如manage, upload, view）
[policy_definition]
p = sub, obj, act

#角色定义（模型）：
#g1（有域模型）：参数1：用户（如user_379） 参数2：角色（如admin） 参数3：域/空间（如space_123, global）
#g2：（无域）参数1：角色 参数2：角色 ，来避免书写繁琐，
[role_definition]
g = _, _, _
g2 = _, _

#定义权限检查的通过标准
#任一通过就可以
#与 any 的区别：some 只需一条允许，any 需要所有策略满足
[policy_effect]
e = some(where (p.eft == allow))

#匹配规则，注意需要处理全局admin的情况
#检查用户 r.sub 在 全局域 (global) 是否具有策略中的角色p.sub||检查用户 r.sub 在 当前请求域 (r.dom)是否具有策略中的角色 p.sub
#&&请求资源 r.obj 必须完全匹配策略中定义的资源 p.obj&&请求操作 r.act 必须完全匹配策略中允许的操作 p.act
[matchers]
m = (g(r.sub, p.sub, "global") ||  g(r.sub, p.sub, r.dom)) && r.obj == p.obj && r.act == p.act
